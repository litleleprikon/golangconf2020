// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ex01

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEef7b35DecodeGithubComLitleleprikonGolangconf2020SrcEx01(in *jlexer.Lexer, out *Example) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field0":
			out.Field0 = bool(in.Bool())
		case "Field1":
			out.Field1 = int(in.Int())
		case "Field2":
			out.Field2 = string(in.String())
		case "Field3":
			if in.IsNull() {
				in.Skip()
				out.Field3 = nil
			} else {
				in.Delim('[')
				if out.Field3 == nil {
					if !in.IsDelim(']') {
						out.Field3 = make([]bool, 0, 64)
					} else {
						out.Field3 = []bool{}
					}
				} else {
					out.Field3 = (out.Field3)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.Field3 = append(out.Field3, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Field4":
			if in.IsNull() {
				in.Skip()
				out.Field4 = nil
			} else {
				in.Delim('[')
				if out.Field4 == nil {
					if !in.IsDelim(']') {
						out.Field4 = make([]int, 0, 8)
					} else {
						out.Field4 = []int{}
					}
				} else {
					out.Field4 = (out.Field4)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Field4 = append(out.Field4, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Field5":
			if in.IsNull() {
				in.Skip()
				out.Field5 = nil
			} else {
				in.Delim('[')
				if out.Field5 == nil {
					if !in.IsDelim(']') {
						out.Field5 = make([]string, 0, 4)
					} else {
						out.Field5 = []string{}
					}
				} else {
					out.Field5 = (out.Field5)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Field5 = append(out.Field5, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEef7b35EncodeGithubComLitleleprikonGolangconf2020SrcEx01(out *jwriter.Writer, in Example) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field0\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Field0))
	}
	{
		const prefix string = ",\"Field1\":"
		out.RawString(prefix)
		out.Int(int(in.Field1))
	}
	{
		const prefix string = ",\"Field2\":"
		out.RawString(prefix)
		out.String(string(in.Field2))
	}
	{
		const prefix string = ",\"Field3\":"
		out.RawString(prefix)
		if in.Field3 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Field3 {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Field4\":"
		out.RawString(prefix)
		if in.Field4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Field4 {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Field5\":"
		out.RawString(prefix)
		if in.Field5 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Field5 {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Example) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEef7b35EncodeGithubComLitleleprikonGolangconf2020SrcEx01(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Example) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEef7b35EncodeGithubComLitleleprikonGolangconf2020SrcEx01(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Example) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEef7b35DecodeGithubComLitleleprikonGolangconf2020SrcEx01(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Example) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEef7b35DecodeGithubComLitleleprikonGolangconf2020SrcEx01(l, v)
}
